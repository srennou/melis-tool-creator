<?php

/**
 * Melis Technology (http://www.melistechnology.com)
 *
 * @copyright Copyright (c) 2016 Melis Technology (http://www.melistechnology.com)
 *
 */

namespace ModuleTpl\Service;

use ReflectionClass;
use Laminas\Http\PhpEnvironment\Response as HttpResponse;
use Laminas\View\Model\ViewModel;
use MelisCore\Service\MelisServiceManager;

class ModuleTplToolService extends MelisServiceManager
{
    protected $_melisToolKey;
    protected $_melisConfig;
    protected $_appConfig;
    protected $_usedKey;


    /**
     * Returns the columns in the app.tools.php
     *
     * @return Array;
     */
    public function getColumns()
    {
        return $this->_appConfig['table']['columns'];
    }

    /**
     * Sets what configuration key in app.tools.php will be used on this tool service.
     *
     * @param String $module
     * @param String $melisToolKey
     */
    public function setMelisToolKey($module, $melisToolKey)
    {
        $this->_melisToolKey = $module . '/tools/' . $melisToolKey;

        $this->_melisConfig = $this->getServiceManager()->get('MelisCoreConfig');
        $this->_appConfig = $this->_melisConfig->getItem($this->_melisToolKey);
        $this->_usedKey = $melisToolKey;
    }

    /**
     * Retrieves the content of the view file
     *
     * @param Array $dispatchHandler
     *
     * @return string
     */
    public function getViewContent($dispatchHandler)
    {
        $forward = $this->getServiceManager()->get('ControllerPluginManager')->get('forward');
        $module = $dispatchHandler['module'];
        $controller = $dispatchHandler['controller'];
        $actionView = $dispatchHandler['action'];

        $action = $this->convertToNormalFunction($actionView);

        $viewModel = new ViewModel();
        $viewModel = $forward->dispatch($module . '\\Controller\\' . $controller, ['action' => $action]);

        $renderer = $this->getServiceManager()->get('Laminas\View\Renderer\RendererInterface');
        $html = new \Laminas\Mime\Part($renderer->render($viewModel));

        // since it will return an object with private properties, change the accessibility so we can get the content data we want.
        $reflection = new ReflectionClass($html);
        $property = $reflection->getProperty('content');
        $property->setAccessible(true);

        $content = $property->getValue($html);

        // replace single quote with duoble quote
        $content = str_replace('\'', '&#39;', $content);

        return $content;
    }

    /**
     * This is used whenever you want to convert phtml files names into an action name
     *
     * @param string $action
     *
     * @return string
     */
    public function convertToNormalFunction($action)
    {
        $actionStr = '';
        $actionView = explode('-', $action);
        $loopCtr = 0;
        foreach ($actionView as $actionWords) {
            if ($loopCtr > 0) {
                $actionStr .= ucfirst($actionWords);
            } else {
                $actionStr .= $actionWords;
            }

            $loopCtr++;
        }

        return $actionStr;
    }

    /**
     * Returns an array of searchable columns that will be used whenever search function is used in the Data Table
     *
     * return array
     */
    public function getSearchableColumns()
    {
        $seachableCols = [];

        if ($this->_appConfig['table']['searchables']) {
            $seachableCols = $this->_appConfig['table']['searchables'];
        }

        return $seachableCols;
    }

    /**
     * This functions reads the configuration inside the app.tool array config
     *
     * @param null $targetTable
     * @param bool $allowReInit
     * @param bool $selectCheckbox
     * @param array $tableOption
     * @param string $type
     * @param string $responsive
     *
     * @return string
     */
    public function getDataTableConfiguration(
        $targetTable = null,
        $allowReInit = false,
        $selectCheckbox = false,
        $tableOption = [],
        $type = '',
        $customColumns = [],
        $responsive = "true"
    ) {
        $table = $this->_appConfig['table'];
        $dtJScript = '';

        if ($table) {
            $tableId = is_null($targetTable) ? $table['target'] : $targetTable;
            $ajaxUrl = $table['ajaxUrl'];
            $dataFunction = !empty($table['dataFunction']) ? 'data: ' . $table['dataFunction'] : '';
            $ajaxCallBack = !empty($table['ajaxCallback']) ? $table['ajaxCallback'] . ';' : '';
            $initComplete = !empty($table['initComplete']) ? $table['initComplete'] . ';' : '';
            $filters = $table['filters'];
            $columns = $table['columns'];
            // for custom columns
            if (!empty($customColumns)) {
                $columns = $customColumns;
            }
            $actionContainer = $table['actionButtons'];

            $top = '<"row"';

            $topButton = $filters['button']??[];
            $topButtonDom = '<"table-filter-container"<"row"';

            $topRight = !empty($topButton) ? (sizeof($topButton) <= 2) ? '<"col-md-10"' : '<"col-md-9"' : '<"col-md-12"';
            $topLeft = !empty($topButton) ? (sizeof($topButton) <= 2) ? '<"col-md-2"' : '<"col-md-3"' : '';

            $jsSdomContentInit = '';
            $tableTop = '<"table-filter-container"<"filter-bar container-fluid"<"row"';

            $topFilter = $filters['top']??[];
            $topFilterDom = '<"table-filter-container"<"row"';

            $left = $filters['left']??[];
            $center = $filters['center']??[];
            $right = $filters['right']??[];
            $bottom = $filters['bottom']??[];
            $bottomLeftHidden = $filters['bottom-left']??[];
            $bottomCenterHidden = $filters['bottom-center']??[];
            $bottomRightHidden = $filters['bottom-right']??[];
            $leftDom = '<"fb-dt-left col-12 col-md-4"';
            $centerDom = '<"fb-dt-center col-12 col-md-4"';
            $rightDom = '<"fb-dt-right col-12 col-md-4"';
            $bottomDom = '<"col-12"';
            $bottomLeftHiddenDom = '<"fb-dt-left col-12 col-md-4 hidden-filters d-none"';
            $bottomCenterHiddenDom = '<"fb-dt-center col-12 col-md-4 hidden-filters d-none"';
            $bottomRightHiddenDom = '<"fb-dt-right col-12 col-md-4 hidden-filters d-none"';

            // datatables predefined filter plugins
            $preDefDTFilter = ['l', 'f'];

            $searchInputClass = '';

            // render the buttons in the left section of the filter bar
            foreach ($topButton as $topKey => $topValue) {
                $col = (sizeof($topButton) <= 2) ? 'col-md-6' : 'col-md-4';
                $htmlContent = $this->getViewContent($topValue);
                if (!in_array($htmlContent, $preDefDTFilter)) {
                    $topButtonDom .= '<"' . $col . ' ' . $topKey . '">';
                    //html content appear one line
                    $htmlContent = preg_replace("/\r|\n/", "", $htmlContent);
                    $jsSdomContentInit .= '$(".' . $topKey . '").html(\'' . $this->replaceQuotes($htmlContent) . '\');';
                } else {
                    $topButtonDom .= '<"' . $col . ' ' . $topKey . '"' . $htmlContent . '>';
                    if ($htmlContent == 'f') {
                        $searchInputClass = $topKey;
                    }
                }
            }
            $topButtonDom .= '>>';

            // render the buttons in the left section of the filter bar
            foreach ($topFilter as $topKey => $topValue) {
                $htmlContent = $this->getViewContent($topValue);
                if (!in_array($htmlContent, $preDefDTFilter)) {
                    $topFilterDom .= '<"col-md-6 ' . $topKey . '">';
                    //html content appear one line
                    $htmlContent = preg_replace("/\r|\n/", "", $htmlContent);
                    $jsSdomContentInit .= '$(".' . $topKey . '").html(\'' . $this->replaceQuotes($htmlContent) . '\');';
                } else {
                    $topFilterDom .= '<"col-md-6 ' . $topKey . '"' . $htmlContent . '>';
                    if ($htmlContent == 'f') {
                        $searchInputClass = $topKey;
                    }
                }
            }
            $topFilterDom .= '>>';

            // render the buttons in the left section of the filter bar
            foreach ($left as $leftKey => $leftValue) {
                $htmlContent = $this->getViewContent($leftValue);
                if (!in_array($htmlContent, $preDefDTFilter)) {
                    $leftDom .= '<"' . $leftKey . '">';
                    $htmlContent = preg_replace("/\r|\n/", "", $htmlContent);
                    $jsSdomContentInit .= '$(".' . $leftKey . '").html(\'' . $this->replaceQuotes($htmlContent) . '\');';
                } else {
                    $leftDom .= '<"' . $leftKey . '"' . $htmlContent . '>';
                    if ($htmlContent == 'f') {
                        $searchInputClass = $leftKey;
                    }
                }
            }

            // render the buttons in the center section of the filter bar
            foreach ($center as $centerKey => $centerValue) {
                $htmlContent = $this->getViewContent($centerValue);
                if (!in_array($htmlContent, $preDefDTFilter)) {
                    $centerDom .= '<"' . $centerKey . '">';
                    $htmlContent = preg_replace("/\r|\n/", "", $htmlContent);
                    $jsSdomContentInit .= '$(".' . $centerKey . '").html(\'' . $htmlContent . '\');';
                } else {
                    $centerDom .= '<"' . $centerKey . '"' . $htmlContent . '>';
                    if ($htmlContent == 'f') {
                        $searchInputClass = $centerKey;
                    }
                }
            }

            // render the buttons in the right sectuib if the filter bar
            foreach ($right as $rightKey => $rightValue) {
                $htmlContent = $this->getViewContent($rightValue);
                $htmlContent = $this->replaceQuotes($htmlContent);
                if (!in_array($htmlContent, $preDefDTFilter)) {
                    $rightDom .= '<"' . $rightKey . '">';
                    $htmlContent = preg_replace("/\r|\n/", "", $htmlContent);
                    $jsSdomContentInit .= '$(".' . $rightKey . '").html(\'' . $htmlContent . '\');';
                } else {
                    $rightDom .= '<"' . $rightKey . '"' . $htmlContent . '>';
                    if ($htmlContent == 'f') {
                        $searchInputClass = $rightKey;
                    }
                }
            }

            // render the buttons in the bottom section of the filter
            foreach ($bottom as $bottomKey => $bottomValue) {
                $htmlContent = $this->getViewContent($bottomValue);
                if (!in_array($htmlContent, $preDefDTFilter)) {
                    $bottomDom .= '<"' . $bottomKey . '">';
                    $htmlContent = preg_replace("/\r|\n/", "", $htmlContent);
                    $jsSdomContentInit .= '$(".' . $bottomKey . '").html(\'' . $htmlContent . '\');';
                } else {
                    $bottomDom .= '<"' . $bottomKey . '"' . $htmlContent . '>';
                    if ($htmlContent == 'f') {
                        $searchInputClass = $bottomKey;
                    }
                }
            }

            // render the hidden filters in the bottom left section
            foreach ($bottomLeftHidden as $bottomLeftHiddenKey => $bottomLeftHiddenValue) {
                $htmlContent = $this->getViewContent($bottomLeftHiddenValue);
                if (!in_array($htmlContent, $preDefDTFilter)) {
                    $bottomLeftHiddenDom .= '<"' . $bottomLeftHiddenKey . '">';
                    $htmlContent = preg_replace("/\r|\n/", "", $htmlContent);
                    $jsSdomContentInit .= '$(".' . $bottomLeftHiddenKey . '").html(\'' . $htmlContent . '\');';
                } else {
                    $bottomLeftHiddenDom .= '<"' . $bottomLeftHiddenKey . '"' . $htmlContent . '>';
                    if ($htmlContent == 'f') {
                        $searchInputClass = $bottomLeftHiddenKey;
                    }
                }
            }

            // render the hidden filters in the bottom center section
            foreach ($bottomCenterHidden as $bottomCenterHiddenKey => $bottomCenterHiddenValue) {
                $htmlContent = $this->getViewContent($bottomCenterHiddenValue);
                if (!in_array($htmlContent, $preDefDTFilter)) {
                    $bottomCenterHiddenDom .= '<"' . $bottomCenterHiddenKey . '">';
                    $htmlContent = preg_replace("/\r|\n/", "", $htmlContent);
                    $jsSdomContentInit .= '$(".' . $bottomCenterHiddenKey . '").html(\'' . $htmlContent . '\');';
                } else {
                    $bottomCenterHiddenDom .= '<"' . $bottomCenterHiddenKey . '"' . $htmlContent . '>';
                    if ($htmlContent == 'f') {
                        $searchInputClass = $bottomCenterHiddenKey;
                    }
                }
            }

            // render the hidden filters in the bottom right section
            foreach ($bottomRightHidden as $bottomRightHiddenKey => $bottomRightHiddenValue) {
                $htmlContent = $this->getViewContent($bottomRightHiddenValue);
                if (!in_array($htmlContent, $preDefDTFilter)) {
                    $bottomRightHiddenDom .= '<"' . $bottomRightHiddenKey . '">';
                    $htmlContent = preg_replace("/\r|\n/", "", $htmlContent);
                    $jsSdomContentInit .= '$(".' . $bottomRightHiddenKey . '").html(\'' . $htmlContent . '\');';
                } else {
                    $bottomRightHiddenDom .= '<"' . $bottomRightHiddenKey . '"' . $htmlContent . '>';
                    if ($htmlContent == 'f') {
                        $searchInputClass = $bottomRightHiddenKey;
                    }
                }
            }

            $tableSearchPlugin = '';
            if (!empty($searchInputClass)) {
                $tableSearchPlugin = '$(\'.' . $searchInputClass . ' input[type="search"]\').unbind();
                                           $(\'.' . $searchInputClass . ' input[type="search"]\').typeWatch({
                                                captureLength: 2,
                                                callback: function(value) {
                                                ' . str_replace("#", "$", $tableId) . '.search(value).draw();   
                                                }
                                            });';
            }

            $tableTop .= $leftDom . '>' . $centerDom . '>' . $rightDom . '>' . $bottomDom . '>' . $bottomLeftHiddenDom . '>' . $bottomCenterHiddenDom . '>' . $bottomRightHiddenDom . '>>>>';
            $topRight .= $topFilterDom . $tableTop . '>';
            $topLeft .= !empty($topLeft) ? $topButtonDom . '>' : '';
            $top .= $topRight . $topLeft . '>';

            $tableBottom = '<"bottom" t<"pagination-cont"rip>>';

            // check if the filter array configuration is empty
            if (empty($left) && empty($bigLeft) && empty($center) && empty($smallCenter) && empty($right) && empty($smallRight)) {
                $sDomStructure = $tableBottom;
            } else {
                // if not filters found, filter-bar class content should not be displayed
                $sDomStructure = $top . $tableBottom;
            }

            // Action Buttons
            $actionButtons = '';
            $action = '';
            $forward = $this->getServiceManager()->get('ControllerPluginManager')->get('forward');
            $actionCount = 0;
            foreach ($actionContainer as $actionKey => $actionContent) {
                $actionButtons .= $this->getViewContent($actionContent) . ' ';
            }

            // remove unnecessary new lines and text paragraphs (not <p> tags)
            $actionButtons = trim(preg_replace('/\s+/', ' ', $actionButtons));

            // retrieve the css configuration inside each columns
            $colCtr = 1; // starts with index 1 since this will be used in JS configuration for jquery nth-child
            $colKeyId = array_keys($columns);

            // Action Column
            $actionColumn = null;
            // convert columns in Javascript JSON
            $jsonColumns = '[';
            foreach ($colKeyId as $colId) {
                $jsonColumns .= '{"data":"' . $colId . '"},';
            }

            if (!empty($actionButtons)) {
                $jsonColumns .= '{"data":"actions"}';

                // Preparing the Table Action column Buttons
                $actionColumn = '{
                                        "targets": -1,
                                        "data": null,
                                        "mRender": function (data, type, full) {
                                            return \'<div>' . $actionButtons . '</div>\';
                                        },
                                        "bSortable" : false,
                                        "sClass" : \'dtActionCls\',
                                    }';
            }
            $jsonColumns .= ']';

            $fnName = 'fn' . $tableId . 'init';

            $reInitTable = '';
            if ($allowReInit) {
                $reInitTable = '     
                    var dTable = $("' . $tableId . '").DataTable();
                    if(dTable !== undefined) {
                           dTable.destroy();    
                    }';
            }
            // select checkbox extension
            $select = '';
            $selectColDef = '';
            if ($selectCheckbox) {
                $selectColDef = '{
                                    "targets": 0,                                   
                                     "bSortable":false,                                 
                                     "mRender": function (data, type, full, meta){
                                         return `<div class="checkbox checkbox-single margin-none">
                                                        <label class="checkbox-custom">
                                                            <i class="fa fa-fw fa-square-o checked"></i>
                                                            <input type="checkbox" checked="checked" name="id[]" value="` + $("<div/>").text(data).html() + `">
                                                        </label>
                                                    </div>  
                                                `;
                                     }
                                },';
            }

            /**
             * DataTable default is every Column are sortable
             * This process will get not sortable column from tool config and prepare string for datatable configuration
             **/
            $unSortableColumns = [];
            $columnCtr = 0;
            foreach ($columns as $colKey => $colArrValue) {
                if (isset($colArrValue['sortable'])) {
                    // Getting unsortable columns
                    $isSortable = $colArrValue['sortable'] == false ? array_push($unSortableColumns, $columnCtr) : '';
                }
                $columnCtr++;
            }
            $unSortableColumnsStr = '';
            if (!empty($unSortableColumns)) {
                // Creating config string for Unsortable Columns
                $unSortableColumnsStr = '{ targets: [' . implode(',', $unSortableColumns) . '], bSortable: false},';
            }
            // Column Unsortable End

            // Preparing Table Column Styles
            $columnsStyles = [];
            $columnCtr = 0;
            foreach ($columns as $colKey => $colArrValue) {
                if (isset($colArrValue['css'])) {
                    // Getting Style of the columns
                    $columnStyles = $colArrValue['css'];
                }
                // Adding the Ctr/index/number of the column
                $columnStyles['targets'] = $columnCtr;

                array_push($columnsStyles, $columnStyles);
                $columnCtr++;
            }
            $columnsStylesStr = '';
            if (!empty($columnsStyles)) {
                // Creating Column config string
                foreach ($columnsStyles as $sVal) {
                    $columnStyle = [];
                    foreach ($sVal as $cKey => $cVal) {
                        if (in_array($cKey, ['width', 'className', 'targets', 'visible'])) {
                            $cVal = (is_numeric($cVal)) ? $cVal : '"' . $cVal . '"';
                            array_push($columnStyle, '"' . $cKey . '": ' . $cVal);
                        }
                    }
                    $columnsStylesStr .= '{ ' . implode(', ', $columnStyle) . ' },' . PHP_EOL;
                }
            }
            // Columns Styles End

            // Default Melis Table Configuration
            // This can be override from Param
            $defaultTblOptions = [
                'paging' => 'true',
                'ordering' => 'true',
                'serverSide' => 'true',
                'searching' => 'true',
                'pageLength' => '10'
            ];
            // Merging Default Configuration and Param Configuration
            // This process will override default config if index exist on param config
            $finalTblOption = array_merge($defaultTblOptions, $tableOption);

            // Table Option
            $finalTblOptionStr = '';
            foreach ($finalTblOption as $key => $val) {
                if (is_array($val)) {
                    // If Option has multiple options
                    $val = json_encode($val);
                }
                $finalTblOptionStr .= $key . ': ' . $val . ',' . PHP_EOL;
            }

            // Table language translations
            $language = 'melisDataTable.tableLanguage.default';


            //remove special characters in function name
            $fnName = preg_replace('/\W/', '', $fnName);
            // simulate javascript code function here
            $dtJScript = 'window.' . $fnName . ' = function() {
                    let customMelisLang = '.$language.';
                    customMelisLang.processing = \'<div style="display: inline;"><i class="melis-primary-txt fa fa-cog fa-spin fa-2x fa-fw"></i>\'+'.$language.'.sProcessing+\'</div>\';
                    ' . $reInitTable . '
                    var ' . str_replace("#", "$", $tableId) . ' = $("' . $tableId . '").DataTable({
                        ' . $select . '
                        ' . $finalTblOptionStr . '
                        responsive: ' . $responsive . ',
                        processing: true,
                        lengthMenu: [ [10, 25, 50, 100], [10, 25, 50, 100] ],
                        ajax: {
                            url: "' . $ajaxUrl . '",
                            type: "POST",
                            ' . $dataFunction . '
                        },
                        initComplete : function(oSettings, json) {
                            ' . $initComplete . '  
                        },
                        fnDrawCallback: function(oSettings) {
                            ' . $ajaxCallBack . '
                        },
                        columns: ' . $jsonColumns . ',
                        language: customMelisLang,
                        sDom : \'' . $sDomStructure . '\',
                        bSort: true,
                        searchDelay: 1500,
                        columnDefs: [
                            ' . $columnsStylesStr . '  
                            ' . $unSortableColumnsStr . '
                            ' . $selectColDef . '
                            { responsivePriority: 1, targets: 0 },';

            if ($actionColumn != "") {
                $dtJScript .= '{responsivePriority:2, targets: -1 },'; // make sure action column stays whenever the window is resized
            }
            $dtJScript .= $actionColumn . '
                        ],
                    }).columns.adjust().responsive.recalc();
                    return ' . str_replace("#", "$", $tableId) . ';
                };
                var ' . str_replace("#", "$", $tableId) . ' = ' . $fnName . '();
                $("' . $tableId . '").on("init.dt", function(e, settings) {
                    ' . $jsSdomContentInit . '
                    ' . $tableSearchPlugin . '   
                });';
        }

        return $dtJScript;
    }

    /**
     * Quote correction for better execution in queries
     *
     * @param $text
     *
     * @return string
     */
    private function replaceQuotes($text)
    {
        return str_replace(["'", "’"], chr(92) . "'", $text);
    }

    /**
     * set the columns for custom 
     *
     * @return Array;
     */
    public function setColumns($columns)
    {
        return $this->_appConfig['table']['columns'] = $columns;
    }

    /**
     * export data with multi-dimonsional array
     *  - format
     *  [
     *      'array1' => [
     *          // required
     *          'fields' => [
     *              'field1',
     *              'field2'
     *          ],
     *          'data' => []
     *      ],
     *      'array2' => []
     *  ]
     */
    public function customExport($data, $fileName, $separator = ";", $enclosingChar = '"', $excludeFields = [])
    {
        // melis core tool
        $tool = $this->getServiceManager()->get('MelisCoreTool');
        // strip tags
        $striptags = true;
        // response
        $response = null;
        // content of the response
        $content = null;
        if ($data) {
            foreach ($data as $group => $val) {
                $g = $tool->sanitize($group);
                $g = mb_convert_encoding($g, 'UTF-16LE', 'UTF-8');
                // append group label
                $content .= strtoupper($g) . "\n";
                if (isset($val['fields']) && !empty($val['fields'])) {
                    // append first columns
                    $f = $tool->sanitize($val['fields']);
                    // remove the excluded field
                    if (!empty($excludeFields)) {
                        foreach ($excludeFields as $exk) {
                            if (in_array($exk, $f)) {
                                unset($f[array_search($exk, $f)]);
                            }
                        }
                    }
                    $f = mb_convert_encoding($f, 'UTF-16LE', 'UTF-8');
                    $content .= implode($separator, $f) . "\n";
                }
                // next append data
                if (isset($val['data']) && !empty($val['data'])) {
                    foreach ($val['data'] as $key => $val2) {
                        foreach ($val['fields'] as $field) {
                            if (!in_array($field, $excludeFields)) {
                                $n = $tool->sanitize($val2[$field]);
                                $n = mb_convert_encoding($n, 'UTF-16LE', 'UTF-8');
                                $content .= '"' . $n . '"' . $separator;
                            }
                        }
                        $content .= "\n";
                    }
                }
                $content .= "\n";
            }

            // construct headers
            $response = new HttpResponse();
            $headers = $response->getHeaders();
            $headers->addHeaderLine('Content-Type', 'text/csv; charset=utf-8');
            $headers->addHeaderLine('Content-Disposition', "attachment; filename=\"" . $fileName . "\"");
            $headers->addHeaderLine('Accept-Ranges', 'bytes');
            $headers->addHeaderLine('Content-Length', strlen($content));
            $headers->addHeaderLine('fileName', $fileName);
            $response->setContent($content);
        }

        return $response;
    }

    /**
     * @param $str
     * @return string|string[]
     */
    public function cleanString($str)
    {
        $str = preg_replace("/[áàâãªä]/u", "a", $str);
        $str = preg_replace("/[ÁÀÂÃÄ]/u", "A", $str);
        $str = preg_replace("/[ÍÌÎÏ]/u", "I", $str);
        $str = preg_replace("/[íìîï]/u", "i", $str);
        $str = preg_replace("/[éèêë]/u", "e", $str);
        $str = preg_replace("/[ÉÈÊË]/u", "E", $str);
        $str = preg_replace("/[óòôõºö]/u", "o", $str);
        $str = preg_replace("/[ÓÒÔÕÖ]/u", "O", $str);
        $str = preg_replace("/[úùûü]/u", "u", $str);
        $str = preg_replace("/[ÚÙÛÜ]/u", "U", $str);
        $str = preg_replace("/[’‘‹›‚]/u", "'", $str);
        $str = preg_replace("/[“”«»„]/u", '"', $str);
        $str = str_replace("–", "-", $str);
        $str = str_replace(" ", " ", $str);
        $str = str_replace("ç", "c", $str);
        $str = str_replace("Ç", "C", $str);
        $str = str_replace("ñ", "n", $str);
        $str = str_replace("Ñ", "N", $str);
        $str = str_replace("'", "-", $str);
        $str = str_replace("’", "-", $str);

        $trans = get_html_translation_table(HTML_ENTITIES);
        $trans[chr(130)] = '&sbquo;';    // Single Low-9 Quotation Mark
        $trans[chr(131)] = '&fnof;';    // Latin Small Letter F With Hook
        $trans[chr(132)] = '&bdquo;';    // Double Low-9 Quotation Mark
        $trans[chr(133)] = '&hellip;';    // Horizontal Ellipsis
        $trans[chr(134)] = '&dagger;';    // Dagger
        $trans[chr(135)] = '&Dagger;';    // Double Dagger
        $trans[chr(136)] = '&circ;';    // Modifier Letter Circumflex Accent
        $trans[chr(137)] = '&permil;';    // Per Mille Sign
        $trans[chr(138)] = '&Scaron;';    // Latin Capital Letter S With Caron
        $trans[chr(139)] = '&lsaquo;';    // Single Left-Pointing Angle Quotation Mark
        $trans[chr(140)] = '&OElig;';    // Latin Capital Ligature OE
        $trans[chr(145)] = '&lsquo;';    // Left Single Quotation Mark
        $trans[chr(146)] = '&rsquo;';    // Right Single Quotation Mark
        $trans[chr(147)] = '&ldquo;';    // Left Double Quotation Mark
        $trans[chr(148)] = '&rdquo;';    // Right Double Quotation Mark
        $trans[chr(149)] = '&bull;';    // Bullet
        $trans[chr(150)] = '&ndash;';    // En Dash
        $trans[chr(151)] = '&mdash;';    // Em Dash
        $trans[chr(152)] = '&tilde;';    // Small Tilde
        $trans[chr(153)] = '&trade;';    // Trade Mark Sign
        $trans[chr(154)] = '&scaron;';    // Latin Small Letter S With Caron
        $trans[chr(155)] = '&rsaquo;';    // Single Right-Pointing Angle Quotation Mark
        $trans[chr(156)] = '&oelig;';    // Latin Small Ligature OE
        $trans[chr(159)] = '&Yuml;';    // Latin Capital Letter Y With Diaeresis
        $trans['euro'] = '&euro;';    // euro currency symbol
        ksort($trans);

        foreach ($trans as $k => $v) {
            $str = str_replace($v, $k, $str);
        }


        return ($str);
    }

    /**
     * BASE ON MELISCORE exportDataToCsv (but it will not replace the accents)
     * Exports the data inside the data table in CSV
     * @param $data
     * @param string $fileName
     *
     * @param null $customSeparator
     * @param null $customIsEnclosed
     * @return string|HttpResponse
     */
    public function exportDataToCsv($data, $fileName, $customSeparator = null, $customIsEnclosed = null)
    {
        $melisCoreConfig = $this->getServiceManager()->get('MelisCoreConfig');
        $tool = $this->getServiceManager()->get('MelisCoreTool');

        $csvConfig = $melisCoreConfig->getItem('meliscore/datas/default/export/csv');
        $separator = empty($customSeparator) ? $csvConfig['separator'] : $customSeparator;

        if ($customIsEnclosed != null)
            $enclosed = $customIsEnclosed == 0 ? '' : '"';
        else
            $enclosed = $csvConfig['enclosed'];

        $striptags = (int) $csvConfig['striptags'] == 1 ? true : false;
        $response = '';

        if ($data) {
            $csvColumn = $data[0];

            $content = '';

            // for columns
            foreach ($csvColumn as $key => $colText) {
                $content .= $key . $separator;
            }
            $content .= "\r\n";

            // for contents
            foreach ($data as $dataKey => $dataValue) {

                foreach ($dataValue as $key => $value) {

                    if ($striptags) {
                        $value = utf8_encode($value);
                    } else {
                        if (is_int($value)) {
                            $value = (string) $value;
                            $value = utf8_encode($value);
                        }
                    }

                    /**
                     * to solve the issue of 1 double quoute is to replace it with 2 double quote
                     * so that it will not break the csv file
                     */
                    $value = str_replace('"', '""', $value);
                    // content
                    $content .= $enclosed . $value . $enclosed . $separator;
                }
                $content .= "\r\n";
            }

            $response = new HttpResponse();
            $headers = $response->getHeaders();
            $headers->addHeaderLine('Content-Type', 'text/csv; charset=utf-8');
            $headers->addHeaderLine('Content-Disposition', "attachment; filename=\"" . $fileName . "\"");
            $headers->addHeaderLine('Accept-Ranges', 'bytes');
            $headers->addHeaderLine('Content-Length', strlen($content));
            $headers->addHeaderLine('fileName', $fileName);
            $response->setContent($content);
        }

        return $response;
    }
}
